#!/bin/bash

# üßô‚Äç‚ôÇÔ∏èüåê PAI Browser Kerberos Integration
# Seamless Red Hat SSO for Chrome, Firefox, and Edge

set -euo pipefail

# Configuration
CHROME_CONFIG_DIR="$HOME/.config/google-chrome"
CHROMIUM_CONFIG_DIR="$HOME/.config/chromium"
FIREFOX_PROFILE_DIR="$HOME/.mozilla/firefox"
DESKTOP_DIR="$HOME/.local/share/applications"

# Red Hat domains for Kerberos authentication
RED_HAT_DOMAINS="*.redhat.com,*.corp.redhat.com,*.ipa.redhat.com,*.access.redhat.com,*.console.redhat.com,*.cloud.redhat.com,*.developers.redhat.com"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Logging function
log_message() {
    local level=$1
    local message=$2
    
    case $level in
        "INFO") echo -e "${CYAN}‚ÑπÔ∏è  $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}‚úÖ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "ERROR") echo -e "${RED}‚ùå $message${NC}" ;;
        "MAGIC") echo -e "${PURPLE}üåê $message${NC}" ;;
    esac
}

# Magical progress bar function
show_magical_progress() {
    local current=$1
    local total=$2
    local task=$3
    local width=50
    local percentage=$((current * 100 / total))
    local completed=$((current * width / total))
    
    printf "${PURPLE}üåê ${BOLD}${WHITE}Browser SSO Magic:${NC} "
    printf "${CYAN}[${NC}"
    
    # Create rainbow gradient in progress bar
    for ((i=1; i<=completed; i++)); do
        if ((i <= width/6)); then printf "${RED}‚ñà${NC}"
        elif ((i <= width/3)); then printf "${YELLOW}‚ñà${NC}"
        elif ((i <= width/2)); then printf "${GREEN}‚ñà${NC}"
        elif ((i <= 2*width/3)); then printf "${CYAN}‚ñà${NC}"
        elif ((i <= 5*width/6)); then printf "${BLUE}‚ñà${NC}"
        else printf "${PURPLE}‚ñà${NC}"
        fi
    done
    
    printf "%$((width-completed))s" | tr ' ' '‚ñë'
    printf "${CYAN}]${NC} ${BOLD}%3d%%${NC} ${PURPLE}‚ö° %s${NC}\n" "$percentage" "$task"
}

# Detect installed browsers
detect_browsers() {
    log_message "MAGIC" "Detecting installed browsers"
    
    local browsers=()
    
    if command -v google-chrome >/dev/null 2>&1; then
        browsers+=("Google Chrome")
        log_message "SUCCESS" "Found: Google Chrome"
    fi
    
    if command -v chromium >/dev/null 2>&1 || command -v chromium-browser >/dev/null 2>&1; then
        browsers+=("Chromium")
        log_message "SUCCESS" "Found: Chromium"
    fi
    
    if command -v firefox >/dev/null 2>&1; then
        browsers+=("Firefox")
        log_message "SUCCESS" "Found: Firefox"
    fi
    
    if command -v microsoft-edge >/dev/null 2>&1; then
        browsers+=("Microsoft Edge")
        log_message "SUCCESS" "Found: Microsoft Edge"
    fi
    
    if [ ${#browsers[@]} -eq 0 ]; then
        log_message "ERROR" "No supported browsers found"
        log_message "INFO" "Install with: sudo dnf install google-chrome-stable firefox"
        exit 1
    fi
    
    echo "${browsers[@]}"
}

# Configure Chrome/Chromium Kerberos
configure_chrome_kerberos() {
    local browser_name="$1"
    local config_dir="$2"
    local executable="$3"
    
    show_magical_progress 2 6 "Configuring $browser_name Kerberos SSO"
    
    # Create Kerberos-enabled launcher script
    local launcher_script="$HOME/.local/bin/${executable}-kerberos"
    
    cat > "$launcher_script" << EOF
#!/bin/bash
# üßô‚Äç‚ôÇÔ∏èüåê $browser_name with Kerberos SSO for Red Hat

# Kerberos authentication flags
KERBEROS_FLAGS=(
    "--auth-server-whitelist=$RED_HAT_DOMAINS"
    "--auth-negotiate-delegate-whitelist=$RED_HAT_DOMAINS"
    "--enable-auth-negotiate-port"
)

# Privacy and security flags
SECURITY_FLAGS=(
    "--disable-background-networking"
    "--disable-default-apps"
    "--disable-sync"
)

# Performance flags
PERFORMANCE_FLAGS=(
    "--enable-gpu-rasterization"
    "--enable-zero-copy"
)

# Launch $browser_name with Kerberos support
exec $executable "\${KERBEROS_FLAGS[@]}" "\${PERFORMANCE_FLAGS[@]}" "\$@"
EOF

    chmod +x "$launcher_script"
    
    # Create desktop file for Kerberos-enabled browser
    local desktop_file="$DESKTOP_DIR/${executable}-kerberos.desktop"
    mkdir -p "$DESKTOP_DIR"
    
    cat > "$desktop_file" << EOF
[Desktop Entry]
Version=1.0
Name=$browser_name (Red Hat SSO)
GenericName=Web Browser with Kerberos
Comment=Browse the web with automatic Red Hat authentication
Exec=$launcher_script %U
StartupNotify=true
Terminal=false
Icon=$executable
Type=Application
Categories=Network;WebBrowser;
MimeType=text/html;text/xml;application/xhtml+xml;application/xml;application/vnd.mozilla.xul+xml;application/rss+xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;x-scheme-handler/chrome;video/webm;application/x-xpinstall;
Actions=NewWindow;NewPrivateWindow;

[Desktop Action NewWindow]
Name=Open a New Window
Exec=$launcher_script

[Desktop Action NewPrivateWindow]
Name=Open a New Private Window
Exec=$launcher_script --incognito
EOF

    log_message "SUCCESS" "$browser_name Kerberos launcher created: $launcher_script"
    log_message "SUCCESS" "$browser_name desktop file created: $desktop_file"
}

# Configure Firefox Kerberos
configure_firefox_kerberos() {
    show_magical_progress 3 6 "Configuring Firefox Kerberos SSO"
    
    if [ ! -d "$FIREFOX_PROFILE_DIR" ]; then
        log_message "WARNING" "Firefox profile directory not found - creating default profile"
        firefox -CreateProfile default-release >/dev/null 2>&1 || true
        sleep 2
    fi
    
    # Find Firefox profile directory
    local profile_dir
    profile_dir=$(find "$FIREFOX_PROFILE_DIR" -name "*.default*" -type d | head -1)
    
    if [ -z "$profile_dir" ]; then
        log_message "ERROR" "Could not find Firefox profile directory"
        return 1
    fi
    
    log_message "INFO" "Found Firefox profile: $profile_dir"
    
    # Create or update user.js for Kerberos configuration
    local user_js="$profile_dir/user.js"
    
    # Backup existing user.js if it exists
    if [ -f "$user_js" ]; then
        cp "$user_js" "$user_js.backup-$(date +%Y%m%d-%H%M%S)"
        log_message "INFO" "Backed up existing user.js"
    fi
    
    # Add Kerberos configuration
    cat >> "$user_js" << EOF

// üßô‚Äç‚ôÇÔ∏èüåê PAI Browser Kerberos Integration - Red Hat SSO
// Added $(date)

// Enable Kerberos authentication for Red Hat domains
user_pref("network.negotiate-auth.trusted-uris", "$RED_HAT_DOMAINS");
user_pref("network.negotiate-auth.delegation-uris", "$RED_HAT_DOMAINS");
user_pref("network.automatic-ntlm-auth.trusted-uris", "$RED_HAT_DOMAINS");

// Enable SPNEGO (negotiate) authentication
user_pref("network.auth.use-sspi", false);
user_pref("network.negotiate-auth.allow-proxies", true);
user_pref("network.negotiate-auth.allow-non-fqdn", false);

// Security settings for enterprise
user_pref("security.tls.insecure_fallback_hosts", "");
user_pref("network.stricttransportsecurity.preloadlist", true);

// Performance optimizations
user_pref("network.http.pipelining", true);
user_pref("network.http.pipelining.maxrequests", 8);
user_pref("network.http.proxy.pipelining", true);

// Red Hat-specific optimizations
user_pref("browser.cache.disk.capacity", 1048576);
user_pref("network.prefetch-next", true);

EOF

    log_message "SUCCESS" "Firefox Kerberos configuration added to user.js"
    
    # Create Firefox Kerberos launcher
    local firefox_launcher="$HOME/.local/bin/firefox-kerberos"
    
    cat > "$firefox_launcher" << EOF
#!/bin/bash
# üßô‚Äç‚ôÇÔ∏èüåê Firefox with Kerberos SSO for Red Hat

# Set Firefox profile with Kerberos config
export MOZ_USE_XINPUT2=1
export MOZ_ENABLE_WAYLAND=1

# Launch Firefox with the configured profile
exec firefox -P default-release "\$@"
EOF

    chmod +x "$firefox_launcher"
    
    # Create Firefox desktop file
    local firefox_desktop="$DESKTOP_DIR/firefox-kerberos.desktop"
    
    cat > "$firefox_desktop" << EOF
[Desktop Entry]
Version=1.0
Name=Firefox (Red Hat SSO)
GenericName=Web Browser with Kerberos
Comment=Browse the web with automatic Red Hat authentication
Exec=$firefox_launcher %u
StartupNotify=true
Terminal=false
Icon=firefox
Type=Application
Categories=Network;WebBrowser;
MimeType=text/html;text/xml;application/xhtml+xml;application/xml;application/vnd.mozilla.xul+xml;application/rss+xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;
Actions=NewWindow;NewPrivateWindow;

[Desktop Action NewWindow]
Name=Open a New Window
Exec=$firefox_launcher

[Desktop Action NewPrivateWindow]
Name=Open a New Private Window
Exec=$firefox_launcher --private-window
EOF

    log_message "SUCCESS" "Firefox Kerberos launcher created: $firefox_launcher"
}

# Test Kerberos browser integration
test_browser_integration() {
    show_magical_progress 5 6 "Testing browser Kerberos integration"
    
    # Check if Kerberos tickets are available
    if ! klist -s 2>/dev/null; then
        log_message "WARNING" "No active Kerberos tickets - authentication may fail"
        log_message "INFO" "Run: pai-simple-credential-store --kinit"
        return 1
    fi
    
    log_message "SUCCESS" "Active Kerberos tickets detected"
    
    # Test URLs for Red Hat SSO
    local test_urls=(
        "https://access.redhat.com"
        "https://console.redhat.com"
        "https://developers.redhat.com"
        "https://cloud.redhat.com"
    )
    
    log_message "INFO" "Ready to test Red Hat SSO with these URLs:"
    for url in "${test_urls[@]}"; do
        echo -e "  ${CYAN}‚Ä¢ $url${NC}"
    done
    
    echo ""
    log_message "SUCCESS" "Use Kerberos-enabled browser launchers:"
    echo -e "  ${GREEN}‚Ä¢ google-chrome-kerberos${NC}"
    echo -e "  ${GREEN}‚Ä¢ firefox-kerberos${NC}"
    echo -e "  ${GREEN}‚Ä¢ chromium-kerberos${NC} (if installed)"
}

# Show browser integration status
show_status() {
    echo -e "${PURPLE}üßô‚Äç‚ôÇÔ∏èüåê ${BOLD}${WHITE}Browser Kerberos Integration Status${NC}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    # Check Kerberos tickets
    if klist -s 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Kerberos Authentication:${NC} ${BOLD}Active${NC}"
        local principal=$(klist | grep "Default principal" | cut -d: -f2- | xargs)
        echo -e "${CYAN}üë§ Principal:${NC} ${BOLD}$principal${NC}"
    else
        echo -e "${RED}‚ùå Kerberos Authentication:${NC} ${BOLD}No active tickets${NC}"
        echo -e "${YELLOW}üí° Run: pai-simple-credential-store --kinit${NC}"
    fi
    
    echo ""
    
    # Check browser launchers
    local launchers=("google-chrome-kerberos" "firefox-kerberos" "chromium-kerberos")
    for launcher in "${launchers[@]}"; do
        if [ -x "$HOME/.local/bin/$launcher" ]; then
            echo -e "${GREEN}‚úÖ Launcher:${NC} ${BOLD}$launcher${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Launcher:${NC} ${BOLD}$launcher (not installed)${NC}"
        fi
    done
    
    echo ""
    
    # Show Red Hat domains
    echo -e "${PURPLE}üåê Red Hat SSO Domains:${NC}"
    IFS=',' read -ra DOMAINS <<< "$RED_HAT_DOMAINS"
    for domain in "${DOMAINS[@]}"; do
        echo -e "  ${CYAN}‚Ä¢ $domain${NC}"
    done
    
    echo ""
}

# Create browser integration documentation
create_documentation() {
    show_magical_progress 6 6 "Creating browser integration documentation"
    
    cat > "docs/BROWSER-INTEGRATION.md" << 'EOF'
# üßô‚Äç‚ôÇÔ∏èüåê Browser Kerberos Integration Guide
## Seamless Red Hat SSO for Chrome, Firefox, and Edge

### **üéØ What This Provides**

- **Automatic login** to Red Hat websites
- **Single Sign-On (SSO)** across all Red Hat services
- **No more password prompts** for authenticated sites
- **Enterprise-grade security** with Kerberos delegation

### **üåê Supported Red Hat Domains**

The following domains will automatically authenticate:
- `*.redhat.com` - Main Red Hat website and services
- `*.corp.redhat.com` - Internal corporate sites
- `*.ipa.redhat.com` - Identity management
- `*.access.redhat.com` - Customer portal and support
- `*.console.redhat.com` - Red Hat console and management
- `*.cloud.redhat.com` - Red Hat Cloud services
- `*.developers.redhat.com` - Developer resources

### **üöÄ Using Kerberos-Enabled Browsers**

#### **Google Chrome with SSO**
```bash
# Launch Chrome with Kerberos support
google-chrome-kerberos

# Or use desktop launcher: "Google Chrome (Red Hat SSO)"
```

#### **Firefox with SSO**
```bash
# Launch Firefox with Kerberos support  
firefox-kerberos

# Or use desktop launcher: "Firefox (Red Hat SSO)"
```

#### **Testing SSO**
1. **Ensure Kerberos tickets are active:**
   ```bash
   klist  # Should show active tickets
   ```

2. **Launch Kerberos-enabled browser**
3. **Navigate to Red Hat site:**
   - https://access.redhat.com
   - https://console.redhat.com
   - https://cloud.redhat.com

4. **Verify automatic login** - no password prompts!

### **üîß Troubleshooting Browser SSO**

#### **Problem: Still prompted for passwords**

**Solution 1: Check Kerberos tickets**
```bash
# Verify active tickets
klist

# Renew if needed
pai-simple-credential-store --kinit
```

**Solution 2: Verify browser configuration**
```bash
# Check Chrome flags
ps aux | grep chrome | grep auth-server-whitelist

# Check Firefox config
grep negotiate ~/.mozilla/firefox/*/user.js
```

**Solution 3: Test browser launcher**
```bash
# Test Chrome Kerberos launcher
google-chrome-kerberos --version

# Test Firefox launcher
firefox-kerberos --version
```

#### **Problem: Browser not using Kerberos**

**Check browser security settings:**
- Ensure cookies are enabled for Red Hat domains
- Disable strict privacy settings that block authentication
- Clear browser cache and cookies for Red Hat sites

**Verify network connectivity:**
```bash
# Test Red Hat site access
curl -I https://access.redhat.com

# Check corporate network
pai-vpn-kerberos-integration --status
```

### **‚öôÔ∏è Advanced Configuration**

#### **Custom Domain Lists**
Edit the browser launcher scripts in `~/.local/bin/` to modify domain lists:
```bash
# Edit Chrome launcher
vi ~/.local/bin/google-chrome-kerberos

# Modify RED_HAT_DOMAINS variable
RED_HAT_DOMAINS="*.redhat.com,*.mycompany.com"
```

#### **Firefox Advanced Settings**
Access `about:config` in Firefox and modify:
- `network.negotiate-auth.trusted-uris`
- `network.negotiate-auth.delegation-uris`
- `network.automatic-ntlm-auth.trusted-uris`

#### **Security Considerations**
- **Only trusted domains** are configured for Kerberos
- **Credential delegation** limited to Red Hat corporate domains
- **Browser isolation** - Kerberos settings don't affect regular browsing
- **Session management** - SSO tied to active Kerberos tickets

### **üé™ Integration with VPN Automation**

The browser SSO integrates seamlessly with VPN automation:

1. **Connect Red Hat VPN** ‚Üí Automatic Kerberos authentication
2. **Launch Kerberos browser** ‚Üí Immediate Red Hat SSO access
3. **Browse Red Hat sites** ‚Üí No authentication friction
4. **Disconnect VPN** ‚Üí SSO continues until ticket expiration

### **üì± Mobile and Remote Access**

While this solution is for laptop/desktop browsers, Red Hat SSO works across:
- **Mobile browsers** (when on VPN with certificates)
- **Red Hat mobile apps** (with proper authentication setup)  
- **Remote sessions** (SSH with X11 forwarding + Kerberos delegation)

---

**üåê Never enter Red Hat passwords in browsers again - seamless enterprise SSO with unlimited power! ‚ö°üè∞‚ú®**
EOF

    log_message "SUCCESS" "Browser integration documentation created"
}

# Main function
main() {
    case "${1:-}" in
        --install)
            log_message "MAGIC" "Installing browser Kerberos integration"
            
            show_magical_progress 1 6 "Detecting installed browsers"
            local browsers
            browsers=$(detect_browsers)
            
            # Configure Chrome/Chromium
            if [[ "$browsers" == *"Google Chrome"* ]]; then
                configure_chrome_kerberos "Google Chrome" "$CHROME_CONFIG_DIR" "google-chrome"
            fi
            
            if [[ "$browsers" == *"Chromium"* ]]; then
                configure_chrome_kerberos "Chromium" "$CHROMIUM_CONFIG_DIR" "chromium"
            fi
            
            # Configure Firefox
            if [[ "$browsers" == *"Firefox"* ]]; then
                configure_firefox_kerberos
            fi
            
            # Create documentation
            create_documentation
            
            # Test integration
            test_browser_integration
            
            echo ""
            echo -e "${PURPLE}üåê ${BOLD}${WHITE}Browser Kerberos Integration Complete!${NC}"
            echo -e "${GREEN}‚úÖ Red Hat SSO enabled for all supported browsers${NC}"
            echo -e "${GREEN}‚úÖ Desktop launchers created${NC}"
            echo -e "${GREEN}‚úÖ Documentation generated${NC}"
            echo ""
            echo -e "${CYAN}üöÄ Launch browsers with SSO:${NC}"
            echo -e "  ${BLUE}‚Ä¢ google-chrome-kerberos${NC}"
            echo -e "  ${BLUE}‚Ä¢ firefox-kerberos${NC}"
            echo ""
            ;;
            
        --status)
            show_status
            ;;
            
        --test)
            test_browser_integration
            echo ""
            echo -e "${CYAN}üß™ Test Red Hat SSO by visiting:${NC}"
            echo -e "  ${BLUE}‚Ä¢ https://access.redhat.com${NC}"
            echo -e "  ${BLUE}‚Ä¢ https://console.redhat.com${NC}"
            echo -e "  ${BLUE}‚Ä¢ https://cloud.redhat.com${NC}"
            ;;
            
        --help|-h)
            echo -e "${PURPLE}üßô‚Äç‚ôÇÔ∏èüåê ${BOLD}${WHITE}PAI Browser Kerberos Integration${NC}"
            echo ""
            echo -e "${CYAN}USAGE:${NC}"
            echo -e "  pai-browser-kerberos-setup --install   ${GREEN}# Install browser SSO${NC}"
            echo -e "  pai-browser-kerberos-setup --status    ${GREEN}# Show integration status${NC}"
            echo -e "  pai-browser-kerberos-setup --test      ${GREEN}# Test SSO functionality${NC}"
            echo ""
            echo -e "${PURPLE}üåê FEATURES:${NC}"
            echo -e "  ‚Ä¢ Automatic Red Hat website authentication"
            echo -e "  ‚Ä¢ Chrome, Firefox, and Chromium support"
            echo -e "  ‚Ä¢ Desktop launcher integration"
            echo -e "  ‚Ä¢ Enterprise-grade security with Kerberos"
            echo -e "  ‚Ä¢ Seamless integration with VPN automation"
            ;;
            
        *)
            show_status
            echo ""
            echo -e "${YELLOW}üí° Run with --install to set up browser SSO${NC}"
            echo -e "${YELLOW}üí° Run with --help for usage options${NC}"
            ;;
    esac
}

# Run main function
main "$@"
